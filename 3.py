# ==================================================================
# Задача 16
# ==================================================================
# Требуется вычислить, сколько раз встречается некоторое число X в массиве A[1..N].
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве.
# В последующих строках записаны N целых чисел Ai.
# Последняя строка содержит число X
# *Пример:*
# 5
# 1 2 3 4 5
# 3 -> 1

# N = int(input("Введите размер списка: "))
# A = []
# count = 0

# # ЗАПОЛНЕНИЕ СПИСКА А
# for i in range(1, N + 1):
#     A.append(i)
# print(A)

# X = int(input("Введите искомое число: "))

# # ПОИСК СОВПАДЕНИЙ
# for item in A:
#     if X == item:
#         count += 1
# print(count)


# ==================================================================
# Задача 18
# ==================================================================
# Требуется найти в массиве A[1..N] самый близкий по величине элемент к заданному числу X.
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве.
# В последующих  строках записаны N целых чисел Ai.
# Последняя строка содержит число X
# *Пример:*
# 5
# 1 2 3 4 5
# 6 -> 5

# N = int(input("Введите размер списка: "))
# A = []
# B = []  # список с коллекцией дельт

# # ЗАПОЛНЕНИЕ СПИСКА А
# for i in range(1, N + 1):
#     A.append(i)
# print(A)

# X = int(input("Введите искомое число: "))

# # ПОИСК ДЕЛЬТЫ
# for item in A:
#     B.append(X - item)
# # print("Список всех дельт:", B)

# D = B  # список для переделанных отрицательных дельт в положительные

# # СДЕЛАТЬ ОТРОИЦАТЕЛЬНЫЕ ДЕЛЬТЫ - ПОЛОЖИТЕЛЬНЫМИ
# for i in range(len(D)):
#     if D[i] < 0:
#         D[i] *= -1
#         D.insert(D[i], D.pop(B[i]))
# # print("Отрицательные дельты стали положительными:", D)

# # ПОИСК НАИМЕНЬШЕЙ ДЕЛЬТЫ
# for i in range(0, len(D)):
#     if D[i] < D[i - 1]:
#         indexMin = D[i]
# print(B[indexMin] + 1)


# ==================================================================
# Задача 20
# ==================================================================
# В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность.
# В случае с английским алфавитом очки распределяются так
# A, E, I, O, U, L, N, S, T, R – 1 очко;
# D, G – 2 очка;
# B, C, M, P – 3 очка;
# F, H, V, W, Y – 4 очка;
# K – 5 очков;
# J, X – 8 очков;
# Q, Z – 10 очков.

# А русские буквы оцениваются так:
# А, В, Е, И, Н, О, Р, С, Т – 1 очко;
# Д, К, Л, М, П, У – 2 очка;
# Б, Г, Ё, Ь, Я – 3 очка;
# Й, Ы – 4 очка;
# Ж, З, Х, Ц, Ч – 5 очков;
# Ш, Э, Ю – 8 очков;
# Ф, Щ, Ъ – 10 очков.
# Напишите программу, которая вычисляет стоимость введенного пользователем слова. Будем считать, что на вход подается только одно слово, которое содержит либо только английские, либо только русские буквы.
# *Пример:*
# ноутбук -> 12

# one = {"а": "1", "в": "1", "е": "1", "и": "1", "н": "1", "о": "1", "р": "1", "с": "1", "т": "1", "д": "2","к": "2","л": "2","м": "2","п": "2","у": "2", "б": "3", "г": "3","ё": "3","ь": "3", "я": "3", "й": "4", "ы": "4", "ж": "5", "з": "5", "х": "5", "ц": "5", "ч": "5", "ш": "8", "э": "8", "ю": "8", "ф": "10", "щ": "10", "ъ": "10"}

# price = 0

# word = input("Введите слово: ")

# for litter in word :  # пройти по каждой букве введенного слова
#     for pair in one :  # пройти по всем парам словаря
#         if litter == one.keys():  # если буква совпадает с ключом словаря
#             price += int(one.values())  # привести значение словаря к int и прибавить его к ценности буквы
# print(price)  # 0!!


# !!! НЕ ХВАТАЕТ ЗНАНИЯ СИНТАКСИСА ПРИ РАБОТЕ СО СЛОВАРЕМ - ПОНИМАЮ ЧТО В ДВОЙНОМ ЦИКЛЕ НУЖНО РАЗБИТЬ ВВЕДЕННОЕ СЛОВО НА БУКВЫ, И СРАВНИТЬ КАЖДУЮ С КЛЮЧЕМ СЛОВАРЯ - НО ПРОГРАММА НЕ ПРИБАВЛЯЕТ... НЕ ЗНАЮ КАК ПРАВИЛЬНО ЭТО ЗАПИСАТЬ
# СВОИ МЫСЛИ НАПИСАЛ В КОММЕНТАРИЯХ К КОДУ ^ ^ ^